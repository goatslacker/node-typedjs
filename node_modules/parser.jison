
/* lexical grammar */
%lex
%%

\s+                   /* skip whitespace */
"String"              return 'string'
"Number"              return 'number'
"Boolean"             return 'boolean'
"Array"               return 'array'
"Object"              return 'object'
"Maybe"               return 'maybe'
"@type"               return 'NEWTYPE'
([a-z]|[A-Z]|\_)+     return 'VAR'
"//+"                 return 'BEGIN'
"="                   return '='
","                   return ','
"("                   return '('
")"                   return ')'
"["                   return '['
"]"                   return ']'
"{"                   return '{'
"}"                   return '}'
"::"                  return '::'
"->"                  return '->'
":"                   return ':'
"|"                   return '|'
<<EOF>>               return 'EOF'
.                     return 'INVALID'

/lex

/* operator associations and precedence */

%left '='
%left ','
%left ':'
%left '|'


%start expressions

%% /* language grammar */

expressions
    : BEGIN NEWTYPE VAR "=" type EOF
        {return '{"type":"' + $3 + '","alias":' + $5 + '}';}
    | BEGIN VAR "::" arg_list EOF
        {return '{"func":"' + $2 + '","args":[' +$4 + ']}';}
    ;

arg_list
    : type
      {$$ = $1;}
    | arg_list "->" type
      {$$ = $1 +"," + $3;}
    ;

primitive
    : string
      {$$ = '"String"';}
    | number
      {$$ = '"Number"';}
    | boolean
      {$$ = '"Boolean"';}
    | array
      {$$ = '"Array"';}
    | object
      {$$ = '"Object"';}
    ;

object_args
    :  VAR ':' type
        {$$ = '"' + $1 + '":' + $3;}
    | object_args ',' object_args
        {$$ = $1+','+$3;}
    ;

objects
    : '{' object_args '}'
      {$$ = '{"obj": {' + $2 + '}}';}
    | '{' type '}'
      {$$ = '{"type":' + $2 + '}';}
    ;

list
    : '[' type ']'
      {$$ = '[' + $2 + ']';}
    ;

or
  : type '|' type
    {$$ = $1 + ',' + $3;}
  ;

value
  : primitive
  | objects
  | list
  | VAR
      {$$ = '"' + String(yytext) + '"';}
  | VAR '(' ')'
      {$$ = '{"fn": "' + $1 + '"}';}
  ;

type
    : value
    | or
      {$$ = '{"or":[' + $1 + ']}';}
    | maybe value
      {$$ = '{"maybe":' + $2 + '}';}
    | type ',' type
        {$$ = $1+','+$3;}
    ;
