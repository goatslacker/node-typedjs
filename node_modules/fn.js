function id(x) {
  return x
}

function head(xs) {
  return xs[0]
}

function last(xs) {
  return xs[xs.length - 1]
}

function init(xs) {
  return xs.slice(0, xs.length - 1)
}

function curry(f, a) {
  return function (b) {
    return f(a, b)
  }
}

function toMap(arr) {
  return foldl(function (obj, x) {
    var key = x[0]
    var val = x[1]
    obj[key] = val
    return obj
  }, arr, {})
}

function id(x) {
  return x
}

function compact(arr) {
  return filter(Boolean, arr)
}

function filter(f, arr) {
  return Array.prototype.filter.call(arr, function (x) {
    return f(x)
  })
}

function map(f, arr) {
  return Array.prototype.map.call(arr, function (x) {
    return f(x)
  })
}

function concatMap(f, arr) {
  var result;
  result = [];
  arr.forEach(function (x) {
    var item;
    item = f(x);
    return Array.isArray(item) ? Array.prototype.push.apply(result, item) : result.push(item);
  });
  return result;
}

function stringify(args) {
  args = Array.prototype.slice.call(arguments, 0)
  return foldl(concat, args)
}

function foldl(fn, arr, accumulator) {
  var item, index, value
  var length = arr.length

  if (accumulator === undefined) {
    index = 0
    value = arr[0]
  } else {
    index = -1
    value = accumulator
  }

  while (++index < length) {
    value = fn(value, arr[index])
  }

  return value
}

function all(fn, arr) {
  return foldl(function (bool, val) {
    return bool && fn(val)
  }, arr, true)
}

function any(fn, arr) {
  return foldl(function (bool, val) {
    return bool || fn(val)
  }, arr, false)
}

function concat(a, b) {
  if (arguments.length > 2) {
    return foldl(concat, Array.prototype.slice.call(arguments, 0))
  }
  return a.concat(b)
}

function reverse(arr) {
  return arr.reverse()
}

function join(by, arr) {
  return arr.join(by)
}

function property(prop) {
  return function (it) {
    return it[prop]
  }
}

function toString(x) {
  return Object.prototype.toString.call(x)
}

function Maybe(f) {
  try {
    return f()
  } catch (err) {
    return null
  }
}

module.exports = {
  id: id,
  head: head,
  last: last,
  init: init,
  concat: concat,
  concatMap: concatMap,
  map: map,
  filter: filter,
  foldl: foldl,
  all: all,
  any: any,
  curry: curry,
  toMap: toMap,
  id: id,
  reverse: reverse,
  stringify: stringify,
  compact: compact,
  join: join,
  property: property,
  toString: toString,
  Maybe: Maybe
}
