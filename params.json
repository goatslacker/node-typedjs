{"name":"Node-typedjs","body":"This is the [TypedJS](http://typedjs.com) module for node.js\r\n\r\nTypedJS lets you annotate your JavaScript functions with Haskell-like type signatures and then runs a set of automated tests against those functions.\r\n\r\nFor more information visit the [TypedJS GitHub repo](https://github.com/Proxino/TypedJS)\r\n\r\n## Install\r\n\r\nIn your project\r\n\r\n    npm install typedjs\r\n\r\nGlobally to check all your projects\r\n\r\n    npm install typedjs -g\r\n\r\n## How to\r\n\r\n### Add individual tests\r\n\r\nYou may add individual functions to run the automated tests on.\r\n\r\n      var typedjs = require('typedjs');\r\n\r\n      var tests = typedjs.createTests();\r\n\r\n      tests.addTest('foo :: Number -> Number -> Number', function foo(a, b) {\r\n        return a + b;\r\n      });\r\n\r\n      tests.run(); // Boolean. true if tests passed, else false.\r\n      tests.data; // contains information on which functions passed and failed.\r\n\r\n### Test a file\r\n\r\n    var typedjs = require('typedjs');\r\n    var fs = require('fs');\r\n\r\n    // By passing the contents of a file as a String into createTests\r\n    // you'll add the automated tests to all the global functions in the code.\r\n    var tests = typedjs.createTests(fs.readFileSync('myfile.js').toString());\r\n    tests.run();\r\n\r\n### Dealing with closures\r\n\r\nIf you're testing a file the functions must be global otherwise TypedJS doesn't run\r\nthe automated tests on them.\r\n\r\nFortunately this module lets you deal with those closures under one condition, the\r\nfunctions may not call other functions.\r\n\r\n    var typedjs = require('typedjs');\r\n    var fs = require('fs');\r\n\r\n    var code = fs.readFileSync('myfile.js').toString();\r\n\r\n    // the second parameter tells node-typedjs to extract all functions within\r\n    // that have type signatures attached to them\r\n    var tests = typedjs.createTests(code, true);\r\n    tests.run();\r\n\r\n### Contracts\r\n\r\nAlthough the automated tests are great, coupling typedjs with your\r\nunit tests to make sure the types are enforced at runtime is a great way\r\nto spot new bugs and improve code quality.\r\n\r\n    var typedjs = require('typedjs');\r\n    var code = 'function concat(a, b) { return a + b; } //+ concat :: String -> String -> String';\r\n\r\n    var tests = typedjs.enforce(code);\r\n\r\n    tests.run(function (context) {\r\n      context.concat(5, 2); // will fail\r\n      context.concat('foo', 'bar'); // will pass\r\n    });\r\n\r\n    // you can also run it as a String\r\n    tests.run('concat(\"hello\", \"world\")');\r\n\r\n## API\r\n\r\nAutomated tests are created by calling `createTests`\r\n\r\nContracts are created by calling `enforce`\r\n\r\n### createTests(code, extract)\r\n\r\n* code - {String} optional piece of code to run automated tests against\r\n* extract - {Boolean} if true node-typedjs will extract all functions and run them individually\r\n\r\n### enforce(code)\r\n\r\n* code - {String} enforce a contract on some code\r\n\r\n## Executable\r\n\r\nComes with an executable\r\n\r\n    $ typedjs [option] [file1] [file2] [file3]\r\n\r\nOptions available\r\n\r\n* -e | --extract - Tells typedjs to extract functions and run them individually\r\n\r\n## Credits\r\n\r\n* TypedJS - [Ethan Fast](http://ethanfast.com/)\r\n* node-typedjs - [Josh Perez](http://www.goatslacker.com)\r\n\r\n## License\r\n\r\n[MIT-LICENSE](http://josh.mit-license.org)","tagline":"Type Signatures in your JavaScript","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}